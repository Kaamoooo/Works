#pragma kernel CSMain

float _EdgeSize;
float _BlurSpread;
int _BlurIterations;

Texture2D<float> _DepthTexture1;
Texture2D<float> _DepthTexture2;

RWTexture2D<float> _EdgeTexture;
RWTexture2D<float> _EdgeBlurTexture;
RWTexture2D<float> _DifferDepthTexture;

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float _GaussConvolutionKernel[9] = {
        0.0947416, 0.118318, 0.0947416, 0.118318, 0.147761, 0.118318, 0.0947416, 0.118318, 0.0947416
    };

    float depth1 = _DepthTexture1[id.xy];
    float depth2 = _DepthTexture2[id.xy];
    float differDepth = _DifferDepthTexture[id.xy];

    if (depth2 - depth1 > differDepth)
    {
        _DifferDepthTexture[id.xy] = depth2 - depth1;
    }

    float2 uv[9];
    uv[0] = float2(-1, 1);
    uv[1] = float2(0, 1);
    uv[2] = float2(1, 1);
    uv[3] = float2(-1, 0);
    uv[4] = float2(0, 0);
    uv[5] = float2(1, 0);
    uv[6] = float2(-1, -1);
    uv[7] = float2(0, -1);
    uv[8] = float2(1, -1);


    float3x3 sobelY = float3x3(-1, -2, -1, 0, 0, 0, 1, 2, 1);
    float3x3 sobelX = float3x3(-1, 0, 1, -2, 0, 2, -1, 0, 1);

    float edgeY = 0, edgeX = 0;
    for (uint j = 0; j < 9; j++)
    {
        float col = _DifferDepthTexture[uv[j] * (_EdgeSize) + id.xy];
        edgeX += col * sobelX[j / 3][j % 3];
        edgeY += col * sobelY[j / 3][j % 3];
    }
    _EdgeBlurTexture[id.xy] = sqrt(edgeX * edgeX + edgeY * edgeY);

    float convolution = 0;
    for (int i = 0; i < _BlurIterations; i++)
    {
        for (int j = 0; j < 9; j++)
        {
            convolution += _EdgeBlurTexture[uv[j] * (_BlurSpread * (i+1)) + id.xy] * _GaussConvolutionKernel[j];
        }
        // _EdgeBlurTexture[id.xy] = convolution;
        // convolution = 0;
    }
    
    // _EdgeTexture[id.xy] = _EdgeBlurTexture[id.xy];
    // convolution = saturate(convolution);
    convolution/=_BlurIterations;
    _EdgeTexture[id.xy] = sqrt(convolution);
}
